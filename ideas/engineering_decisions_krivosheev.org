[[https://www.youtube.com/watch?v=ITYE2803mu8][⚙️ Модель принятия инженерных решений / Евгений Кривошеев]]

- Можешь ли ты обосновать своё техническое решение? Например, почему у тебя 4 класса, а не 3?
  - Антипаттерн: так архитектор сказал, он умный.
- Модели нужны для борьбы со сложностью. Чем сложнее модели тем они дороже.

- Идея 1. Процесс разработки - это процесс трансформации моделей.
  1. Модель требований уточняется и становится менее противоречивой.
  2. Строится модель предметной области. Часто этот этап пропускается.
  3. Строится архитектура системы.
  4. Пишутся тест-кейсы и код.
- Требования:
  1. Функциональные - несут ценность для пользователя, это фичи.
  2. Нефункциональные - явно не несут ценность, а являются желаемыми свойствами системы: производительность, масштабируемость и т.п.
  3. Поддерживаемость и тестируемость - это внутренние нефункциональные требования, которые определяет сама команда, а не заказчик.

- Идея 2. Требования они разнонаправленные, поэтому дизайн - это компромисс между конфликтом требований. Часто изменения в нефункциональных требованиях приводят к кардинальным изменениям в архитектуре проекта.
  - Нельзя сделать табуретку бесконечно прочной и бесконечно легкой.
  - Нужно хотелки пользователя переводить в измеряемые требования.
  - Табуретка весом 3 кг не может выдержать 5 тонн, это технически невозможно. То есть мы можем сузить пространство решений.
- Примеры конфликтов
  - CAP свойства в распределённых системах
  - Простота или гибкость
- Нужен документ (или хотя бы четкое понимание) определяющий приоритеты. Количественно часто измерить очень дорого, тут скорее качественная оценка.
- Тестируемость конфликтует с поддерживаемостью системы. Тестируемость ведёт к усложнению дизайна.
  - Где располагать тесты: в другом проекте или в том же? Смотрим в требования: Тестировать только публичные контракты или ещё и детали реализации? При обосновании технических решений нужно всегда подниматься до приоритета требований.
- Что выбрать: паттерн creator или фабрика? Идём выше в перечень требований по приоритетам. Если нам важнее поддерживаемость, то берём creator, а если тестируемость, то фабрику.

- Антипаттерны
  - Категорическое мышление: xxx хорошо, а yyy это плохо. Или мы так делаем всегда. Так написано у Фаулера.
    - Так не бывает: каждое решение удовлетворяет требованиям в какой-то измеримой мере.
  - Неспособность обосновать решение.
    - Не может ответить на вопрос а почему сделано именно так.
    - Плохо влияет на командообразование: на интуитивном знании новички и миддлы не смогут построить правильную модель в голове.
  - Неверный выбор акцента усилий
    - Делать весь дизайн в самом начале
    - или
    - Делать дизайн в процессе
  - Overengineering
    - А нужна ли нам гибкость? Опять смотрим требования.

- Ещё раз: идеальных решений нет, это всегда компромисс. Бизнесмен мыслит в терминах денег и рисков.
